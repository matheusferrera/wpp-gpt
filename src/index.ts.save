import express, { Express } from "express";
import http from "http";

import cors from "cors";
import dotenv from "dotenv";
import swaggerJsdoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";

// API files
import messages from "./routes/messages";
import wpp from "./routes/wpp";

// Environment variables configuration
dotenv.config();

//=======================================================================================
//===================================> API config <======================================
//=======================================================================================

const app: Express = express();

// Swagger UI configuration
const options = {
  definition: {
    openapi: "3.1.0",
    info: {
      title: "WhatsApp Automation API",
      version: "0.1.0",
      description:
        "This is a WhatsApp Automation API made with Express and documented with Swagger",
      license: {
        name: "MIT",
        url: "https://spdx.org/licenses/MIT.html",
      },
      contact: {
        name: "Matheus Ferreira",
        url: "https://matheusferrera.com",
        email: "info@email.com",
      },
    },
    servers: [
      {
        url: "http://:3000",
      },
    ],
  },
  apis: ["**/swagger/*.yaml"],
};

// Swagger UI route
const specs = swaggerJsdoc(options);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));

// API Routes
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb" }));
app.use("/messages", messages);
app.use("/wpp", wpp);

//========================================================================================
//================================>  Queue config  <===================================
//========================================================================================

import Queue from "bull";

const messageQueue = new Queue("messageQueue", {
  redis: {
    host: "127.0.0.1",
    port: 6379,
  },
});

//Config para bull dashboard, nao esta funcionando em prod
// import { createBullBoard } from "@bull-board/api";
// import { BullAdapter } from "@bull-board/api/bullAdapter";
// import { ExpressAdapter } from "@bull-board/express";

// messageQueue.process("Massive messages", async (job) => {
//   console.log("EXECUTANDO QUEUE massive message -> ", job.id);
// });

// // Bull-board setup
// const serverAdapter = new ExpressAdapter();
// serverAdapter.setBasePath("/admin/queues");

// const { addQueue, removeQueue, setQueues, replaceQueues } = createBullBoard({
//   queues: [new BullAdapter(messageQueue)],
//   serverAdapter: serverAdapter,
// });

// app.use("/admin/queues", serverAdapter.getRouter());

//========================================================================================
//================================>  INITIALIZE API  <===================================
//========================================================================================

// Start the server
app.use(cors());
const server = http.createServer(app);
const port = process.env.PORT || 3000;
server.listen(port, () => {
  console.log(`\x1b[33m[server] => Server is running on port ${port}\x1b[0m`);
});

// Exports to use in other files
export { messageQueue };
