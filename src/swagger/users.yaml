components:
  schemas:
    User:
      type: object
      required:
        - userId
        - wppNumber
        - name
        - email
        - birthDate
      properties:
        userId:
          type: string
          description: The auto-generated id of the user owner for MongoDB
        wppNumber:
          type: string
          description: The user's WhatsApp number 
        name:
          type: string
          description: User's name
        email:
          type: string
          description: User's email
        birthDate:
          type: string
          description: User's birth date
      example:
        userId: 6611a9852a73e64431289e5d
        wppNumber: "5561982501719"
        name: Fulano da Silva
        email: fulano@email.com
        birthDate: 1970-12-06
tags:
  name: Users
  description: Operations with users
/users:
  get:
    summary: Lists all the users
    tags: [Users]
    responses:
      200:
        description: The list of the saved users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  post:
    summary: Create a new user
    tags: [Users]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      200:
        description: The created user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      500:
        description: Some server error
/user/{userId}:
  get:
    summary: Get the user by id
    tags: [User]
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The user id
    responses:
      200:
        description: The user response by id
        contens:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: The user was not found
  put:
   summary: Update the user by the id
   tags: [Users]
   parameters:
     - in: path
       name: userId
       schema:
         type: string
       required: true
       description: The user id
   requestBody:
     required: true
     content:
       application/json:
         schema:
           $ref: '#/components/schemas/User'
   responses:
     200:
       description: The user was updated
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     404:
       description: The user was not found
     500:
       description: Some error happened
  delete:
    summary: Remove the user by id
    tags: [Users]
    parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: The user id
    responses:
      200:
        description: The user was deleted
      404:
        description: The user was not found
