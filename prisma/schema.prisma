// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//Mesages

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  to     String   @db.VarChar(255)
  content   String?
  contentType     ContentType @default(text)
  timeToSend Int
  status     MessageStatus @default(await)
}

enum MessageStatus {
  await
  send
  error
}

enum ContentType {
  text
  audio
  video
  pdf
}


// Contacts

model Contact {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  remoteid String   @db.VarChar(25) @unique
  name String  @db.VarChar(25)
  obs String  @db.VarChar(100)
  tags        Tag[]    @relation("ContactTags")

  ContactTag ContactTag[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  contacts  Contact[] @relation("ContactTags")

  ContactTag ContactTag[]
}

// Tabela de relacionamento muitos-para-muitos entre Contacts e Tags

model ContactTag {
  contactId Int
  tagId     Int

  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId]) // Define chave composta corretamente
}



